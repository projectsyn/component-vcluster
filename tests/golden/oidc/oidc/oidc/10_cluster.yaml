apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    name: vc-oidc
  name: vc-oidc
  namespace: testns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations: {}
  labels:
    name: oidc
  name: oidc
  namespace: testns
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - secrets
      - services
      - pods
      - pods/attach
      - pods/portforward
      - pods/exec
      - endpoints
      - persistentvolumeclaims
    verbs:
      - create
      - delete
      - patch
      - update
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - patch
      - update
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - replicasets
      - deployments
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations: {}
  labels:
    name: oidc
  name: oidc
  namespace: testns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: oidc
subjects:
  - kind: ServiceAccount
    name: vc-oidc
    namespace: testns
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    name: oidc
  name: oidc
  namespace: testns
spec:
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: vcluster
    release: oidc
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    name: oidc-headless
  name: oidc-headless
  namespace: testns
spec:
  clusterIP: None
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: vcluster
    release: oidc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    name: oidc
  name: oidc
  namespace: testns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vcluster
      release: oidc
  serviceName: oidc-headless
  template:
    metadata:
      labels:
        app: vcluster
        release: oidc
    spec:
      affinity: {}
      containers:
        - args:
            - server
            - --write-kubeconfig=/data/k3s-config/kube-config.yaml
            - --data-dir=/data
            - --disable=traefik,servicelb,metrics-server,local-storage,coredns
            - --disable-network-policy
            - --disable-agent
            - --disable-scheduler
            - --disable-cloud-controller
            - --flannel-backend=none
            - --service-cidr=172.30.0.0/16
            - --kube-controller-manager-arg=controllers=*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle
            - --kube-apiserver-arg=oidc-issuer-url=https://id.local/auth/realms/local
            - --kube-apiserver-arg=oidc-client-id=local
            - --kube-apiserver-arg=oidc-username-claim=email
            - --kube-apiserver-arg=oidc-groups-claim=groups
          command:
            - /bin/k3s
          env: []
          image: docker.io/rancher/k3s:v1.22.4-k3s1
          name: vcluster
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /data
              name: data
        - args:
            - --name=oidc
            - --out-kube-config-secret=vc-oidc-kubeconfig
          env: []
          image: docker.io/loftsh/vcluster:0.5.0-beta.0
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 2
          name: syncer
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
            periodSeconds: 2
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /data
              name: data
              readOnly: true
      nodeSelector: {}
      serviceAccountName: vc-oidc
      terminationGracePeriodSeconds: 10
      tolerations: []
      volumes:
        - emptyDir: {}
          name: data
  volumeClaimTemplates: []
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations: {}
  labels:
    name: oidc
  name: oidc
  namespace: testns
spec:
  rules:
    - host: testcluster.local
      http:
        paths:
          - backend:
              service:
                name: oidc
                port:
                  name: https
            path: /
            pathType: Prefix
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
  labels:
    name: oidc-apply-manifests
  name: oidc-apply-manifests
  namespace: testns
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: oidc-apply-manifests
    spec:
      containers:
        - args:
            - -eu
            - -c
            - "#!/bin/sh\nset -eu\n\nvcluster_kubeconfig=/etc/vcluster-kubeconfig/config\n\
              \necho \"Setting server URL...\"\n\nkubectl --kubeconfig \"$vcluster_kubeconfig\"\
              \ config set clusters.local.server \"$VCLUSTER_SERVER_URL\"\n\necho\
              \ \"Applying manifests...\"\n\nfor manifest in \"$@\"\ndo\n  printf\
              \ \"$manifest\" | kubectl --kubeconfig \"$vcluster_kubeconfig\" apply\
              \ -f - -oyaml\ndone\n\necho \"Done!\"\n"
            - --
            - '{

              "apiVersion": "rbac.authorization.k8s.io/v1",

              "kind": "ClusterRoleBinding",

              "metadata": {

              "name": "oidc-cluster-admin"

              },

              "roleRef": {

              "apiGroup": "rbac.authorization.k8s.io",

              "kind": "ClusterRole",

              "name": "cluster-admin"

              },

              "subjects": [

              {

              "kind": "Group",

              "name": "admin"

              }

              ]

              }'
          command:
            - sh
          env:
            - name: HOME
              value: /export
            - name: VCLUSTER_SERVER_URL
              value: https://oidc:443
          image: quay.io/bitnami/kubectl:1.22.4
          imagePullPolicy: IfNotPresent
          name: oidc-apply-manifests
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /export
              name: export
            - mountPath: /etc/vcluster-kubeconfig
              name: kubeconfig
              readOnly: true
          workingDir: /export
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: export
        - name: kubeconfig
          secret:
            secretName: vc-oidc-kubeconfig
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
  labels:
    name: oidc-synthesize
  name: oidc-synthesize
  namespace: testns
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: oidc-synthesize
    spec:
      containers:
        - args:
            - -eu
            - -c
            - "#!/bin/sh\nset -eu\n\nvcluster_kubeconfig=/etc/vcluster-kubeconfig/config\n\
              \necho \"Setting server URL...\"\n\nkubectl --kubeconfig \"$vcluster_kubeconfig\"\
              \ config set clusters.local.server \"$VCLUSTER_SERVER_URL\"\n\necho\
              \ \"Checking for namespace 'syn'...\"\n\nexists=$(kubectl --kubeconfig\
              \ \"$vcluster_kubeconfig\" get namespace syn --ignore-not-found)\nif\
              \ [ -n \"$exists\" ]; then\n  echo \"Namespace 'syn' exists. Skipping\
              \ synthesize.\"\n  exit 0\nfi\n\necho \"Starting synthesize...\"\n\n\
              kubectl --kubeconfig \"$vcluster_kubeconfig\" apply -f \"$1\"\n\necho\
              \ \"Done!\"\n"
            - --
            - https://syn.example.com/steward/install.json?token=w84kxjbhf
          command:
            - sh
          env:
            - name: HOME
              value: /export
            - name: VCLUSTER_SERVER_URL
              value: https://oidc:443
          image: quay.io/bitnami/kubectl:1.22.4
          imagePullPolicy: IfNotPresent
          name: oidc-synthesize
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /export
              name: export
            - mountPath: /etc/vcluster-kubeconfig
              name: kubeconfig
              readOnly: true
          workingDir: /export
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: export
        - name: kubeconfig
          secret:
            secretName: vc-oidc-kubeconfig
