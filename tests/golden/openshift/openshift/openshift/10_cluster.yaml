apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    name: vc-openshift
  name: vc-openshift
  namespace: syn-openshift
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations: {}
  labels:
    name: openshift
  name: openshift
  namespace: syn-openshift
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - secrets
      - services
      - pods
      - pods/attach
      - pods/portforward
      - pods/exec
      - endpoints
      - persistentvolumeclaims
    verbs:
      - create
      - delete
      - patch
      - update
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - patch
      - update
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - replicasets
      - deployments
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - endpoints/restricted
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations: {}
  labels:
    name: openshift
  name: openshift
  namespace: syn-openshift
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift
subjects:
  - kind: ServiceAccount
    name: vc-openshift
    namespace: syn-openshift
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    name: syn-vcluster-openshift
  name: syn-vcluster-openshift
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations: {}
  labels:
    name: syn-vcluster-openshift
  name: syn-vcluster-openshift
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: syn-vcluster-openshift
subjects:
  - kind: ServiceAccount
    name: vc-openshift
    namespace: syn-openshift
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    name: openshift
  name: openshift
  namespace: syn-openshift
spec:
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: vcluster
    release: openshift
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    name: openshift-headless
  name: openshift-headless
  namespace: syn-openshift
spec:
  clusterIP: None
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    app: vcluster
    release: openshift
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    name: openshift
  name: openshift
  namespace: syn-openshift
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vcluster
      release: openshift
  serviceName: openshift-headless
  template:
    metadata:
      labels:
        app: vcluster
        release: openshift
    spec:
      affinity: {}
      containers:
        - args:
            - server
            - --write-kubeconfig=/data/k3s-config/kube-config.yaml
            - --data-dir=/data
            - --disable=traefik,servicelb,metrics-server,local-storage,coredns
            - --disable-network-policy
            - --disable-agent
            - --disable-scheduler
            - --disable-cloud-controller
            - --flannel-backend=none
            - --service-cidr=172.30.0.0/16
            - --kube-controller-manager-arg=controllers=*,-nodeipam,-nodelifecycle,-persistentvolume-binder,-attachdetach,-persistentvolume-expander,-cloud-node-lifecycle
            - --tls-san=openshift.syn-openshift.svc.cluster.local
            - --tls-san=openshift.syn-openshift.svc
            - --tls-san=openshift.syn-openshift
            - --tls-san=openshift
          command:
            - /bin/k3s
          env: []
          image: docker.io/rancher/k3s:v1.25.4-k3s1
          name: vcluster
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 200m
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /data
              name: data
            - mountPath: /etc/rancher
              name: etc-rancher
        - args:
            - --name=openshift
            - --out-kube-config-secret=vc-openshift-kubeconfig
            - --sync=ingresses
            - --tls-san=openshift.syn-openshift.svc.cluster.local
            - --tls-san=openshift.syn-openshift.svc
            - --tls-san=openshift.syn-openshift
            - --tls-san=openshift
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          image: docker.io/loftsh/vcluster:0.14.1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 2
          name: syncer
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /readyz
              port: 8443
              scheme: HTTPS
            periodSeconds: 2
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /data
              name: data
              readOnly: true
            - mountPath: /manifests/coredns
              name: coredns
              readOnly: true
      nodeSelector: {}
      serviceAccountName: vc-openshift
      terminationGracePeriodSeconds: 10
      tolerations: []
      volumes:
        - configMap:
            defaultMode: 420
            name: vc-openshift-coredns
          name: coredns
        - emptyDir: {}
          name: etc-rancher
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        storageClassName: null
---
apiVersion: v1
data:
  manifests: |+
    ---

kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: openshift-init-manifests
  name: openshift-init-manifests
  namespace: syn-openshift
---
apiVersion: v1
data:
  coredns.yaml: |
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: coredns
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    rules:
      - apiGroups:
          - ""
        resources:
          - endpoints
          - services
          - pods
          - namespaces
        verbs:
          - list
          - watch
      - apiGroups:
          - discovery.k8s.io
        resources:
          - endpointslices
        verbs:
          - list
          - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      annotations:
        rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:coredns
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:coredns
    subjects:
      - kind: ServiceAccount
        name: coredns
        namespace: kube-system
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: coredns
      namespace: kube-system
    data:
      Corefile: |
        .:1053 {
            {{.LOG_IN_DEBUG}}
            errors
            health
            ready
            kubernetes cluster.local in-addr.arpa ip6.arpa {
              pods insecure
              fallthrough in-addr.arpa ip6.arpa
            }
            hosts /etc/coredns/NodeHosts {
              ttl 60
              reload 15s
              fallthrough
            }
            prometheus :9153
            forward . /etc/resolv.conf
            cache 30
            loop
            reload
            loadbalance
        }

        import /etc/coredns/custom/*.server
      NodeHosts: ""
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: coredns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/name: "CoreDNS"
    spec:
      replicas: 1
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
      selector:
        matchLabels:
          k8s-app: kube-dns
      template:
        metadata:
          labels:
            k8s-app: kube-dns
        spec:
          priorityClassName: "system-cluster-critical"
          serviceAccountName: coredns
          nodeSelector:
            kubernetes.io/os: linux
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  k8s-app: kube-dns
          containers:
            - name: coredns
              image: {{.IMAGE}}
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  cpu: 1000m
                  memory: 170Mi
                requests:
                  cpu: 100m
                  memory: 70Mi
              args: [ "-conf", "/etc/coredns/Corefile" ]
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/coredns
                  readOnly: true
                - name: custom-config-volume
                  mountPath: /etc/coredns/custom
                  readOnly: true
              ports:
                - containerPort: 1053
                  name: dns
                  protocol: UDP
                - containerPort: 1053
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
              securityContext:
                runAsUser: {{.RUN_AS_USER}}
                runAsNonRoot: {{.RUN_AS_NON_ROOT}}
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                readOnlyRootFilesystem: true
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /ready
                  port: 8181
                  scheme: HTTP
                initialDelaySeconds: 0
                periodSeconds: 2
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
          dnsPolicy: Default
          volumes:
            - name: config-volume
              configMap:
                name: coredns
                items:
                  - key: Corefile
                    path: Corefile
                  - key: NodeHosts
                    path: NodeHosts
            - name: custom-config-volume
              configMap:
                name: coredns-custom
                optional: true
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      annotations:
        prometheus.io/port: "9153"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "CoreDNS"
    spec:
      selector:
        k8s-app: kube-dns
      type: ClusterIP
      ports:
        - name: dns
          port: 53
          targetPort: 1053
          protocol: UDP
        - name: dns-tcp
          port: 53
          targetPort: 1053
          protocol: TCP
        - name: metrics
          port: 9153
          protocol: TCP
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    name: vc-openshift-coredns
  name: vc-openshift-coredns
  namespace: syn-openshift
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    name: openshift-create-route
  name: openshift-create-route
  namespace: syn-openshift
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations: {}
  labels:
    name: openshift-create-route
  name: openshift-create-route
  namespace: syn-openshift
rules:
  - apiGroups:
      - route.openshift.io
    resources:
      - routes
      - routes/custom-host
    verbs:
      - '*'
  - apiGroups:
      - apps
    resourceNames:
      - openshift
    resources:
      - statefulsets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations: {}
  labels:
    name: openshift-create-route
  name: openshift-create-route
  namespace: syn-openshift
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift-create-route
subjects:
  - kind: ServiceAccount
    name: openshift-create-route
    namespace: syn-openshift
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
  labels:
    name: openshift-create-route
  name: openshift-create-route
  namespace: syn-openshift
spec:
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        name: openshift-create-route
    spec:
      containers:
        - args:
            - -eu
            - -c
            - |
              #!/bin/sh
              set -eu

              vcluster_kubeconfig=/etc/vcluster-kubeconfig/config

              echo "Using kubeconfig: $vcluster_kubeconfig"

              cert=$(kubectl --kubeconfig $vcluster_kubeconfig config view '-o=template={{(index (index .clusters 0).cluster "certificate-authority-data") | base64decode}}' --raw)

              echo "Found certificate:\n$cert"

              echo "Looking for StatefulSet.apps/${VCLUSTER_STS_NAME}..."

              owner=$(kubectl get StatefulSet.apps "$VCLUSTER_STS_NAME" -ojson | jq '{kind: .kind, apiVersion: .apiVersion, name: .metadata.name, uid: .metadata.uid}')

              echo "Found StatefulSet as owner: $owner"

              echo "Applying route..."

              printf "$1" \
                  | jq \
                      --arg     cert  "$cert" \
                      --argjson owner "$owner" \
                      '.metadata.ownerReferences = [$owner] | .spec.tls.destinationCACertificate = $cert' \
                  | kubectl apply -f - -oyaml

              echo "Done!"
            - --
            - |-
              {
              "apiVersion": "route.openshift.io/v1",
              "kind": "Route",
              "metadata": {
              "annotations": {

              },
              "labels": {
              "name": "openshift"
              },
              "name": "openshift",
              "namespace": "syn-openshift"
              },
              "spec": {
              "host": "test.apps.local",
              "path": "/",
              "port": {
              "targetPort": "https"
              },
              "tls": {
              "insecureEdgeTerminationPolicy": "None",
              "termination": "reencrypt"
              },
              "to": {
              "kind": "Service",
              "name": "openshift",
              "weight": 100
              },
              "wildcardPolicy": "None"
              }
              }
          command:
            - sh
          env:
            - name: HOME
              value: /export
            - name: NAMESPACE
              value: syn-openshift
            - name: VCLUSTER_STS_NAME
              value: openshift
          image: docker.io/bitnami/kubectl:1.28.4
          imagePullPolicy: IfNotPresent
          name: openshift
          ports: []
          stdin: false
          tty: false
          volumeMounts:
            - mountPath: /export
              name: export
            - mountPath: /etc/vcluster-kubeconfig
              name: kubeconfig
              readOnly: true
          workingDir: /export
      imagePullSecrets: []
      initContainers: []
      restartPolicy: OnFailure
      serviceAccountName: openshift-create-route
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: export
        - name: kubeconfig
          secret:
            secretName: vc-openshift-kubeconfig
